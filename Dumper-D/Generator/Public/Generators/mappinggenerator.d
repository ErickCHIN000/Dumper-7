module generators.mappinggenerator;

import std.stdio;
import std.string;
import std.path;
import std.file;

import generators.generator;
import generators.dumpspacegenerator; // For shared types
import settings;

class MappingGenerator : GeneratorImplementation
{
    private:
    alias PredefinedMemberLookupMapType = string[string];

    public:
    static PredefinedMemberLookupMapType predefinedMembers;

    static string mainFolderName = "Mappings";
    static string subfolderName = "";

    static string mainFolder;
    static string subfolder;

    static string getMainFolderName()
    {
        return mainFolderName;
    }

    static string getSubfolderName()
    {
        return subfolderName;
    }

    private:
    static void generateUsmapFile()
    {
        writeln("Generating .usmap mapping file...");
        
        // This would generate a binary .usmap file for FModel/UEViewer
        // For now, we'll create a placeholder text description
        
        string mappingContent = format(`# Usmap file for %s v%s
# Generated by Dumper-7 (D Language Version)
# This would normally be a binary file for FModel/UEViewer

# Package mappings would go here
# Each line would represent a mapping entry:
# ClassName PropertyName PropertyType Offset Size

# Example entries:
UObject.Name FName 0x18 0x08
UObject.Class UClass* 0x10 0x08
UStruct.Super UStruct* 0x40 0x08
UStruct.Children UField* 0x48 0x08

# More mappings would be generated here...
`,
            Settings.Generator.gameName.length > 0 ? Settings.Generator.gameName : "UnknownGame",
            Settings.Generator.gameVersion.length > 0 ? Settings.Generator.gameVersion : "Unknown"
        );

        string filePath = buildPath(mainFolder, "Mappings.usmap.txt");
        std.file.write(filePath, mappingContent);
    }

    static void generateJSONMapping()
    {
        writeln("Generating JSON mapping file...");
        
        import std.json;
        
        JSONValue mappingData = JSONValue.emptyObject();
        
        // Add metadata
        JSONValue metadata = JSONValue.emptyObject();
        metadata["game"] = JSONValue(Settings.Generator.gameName);
        metadata["version"] = JSONValue(Settings.Generator.gameVersion);
        metadata["generator"] = JSONValue("Dumper-7 (D Language)");
        metadata["timestamp"] = JSONValue(Clock.currTime().toISOExtString());
        mappingData["metadata"] = metadata;
        
        // Add object mappings
        JSONValue objects = JSONValue.emptyObject();
        
        // Example object mapping
        JSONValue uobject = JSONValue.emptyObject();
        uobject["size"] = JSONValue(0x28);
        
        JSONValue uobjectProperties = JSONValue.emptyObject();
        uobjectProperties["Name"] = JSONValue(["offset": JSONValue(0x18), "type": JSONValue("FName")]);
        uobjectProperties["Class"] = JSONValue(["offset": JSONValue(0x10), "type": JSONValue("UClass*")]);
        uobject["properties"] = uobjectProperties;
        
        objects["UObject"] = uobject;
        mappingData["objects"] = objects;
        
        string filePath = buildPath(mainFolder, "Mappings.json");
        std.file.write(filePath, mappingData.toPrettyString());
    }

    static void generateCSVMapping()
    {
        writeln("Generating CSV mapping file...");
        
        string csvContent = format(`ClassName,PropertyName,PropertyType,Offset,Size,IsPointer
# CSV mapping for %s v%s
# Generated by Dumper-7 (D Language Version)

UObject,Name,FName,0x18,0x08,false
UObject,Class,UClass,0x10,0x08,true
UStruct,Super,UStruct,0x40,0x08,true
UStruct,Children,UField,0x48,0x08,true
UClass,DefaultObject,UObject,0x90,0x08,true

# More mappings would be generated here...
`,
            Settings.Generator.gameName.length > 0 ? Settings.Generator.gameName : "UnknownGame",
            Settings.Generator.gameVersion.length > 0 ? Settings.Generator.gameVersion : "Unknown"
        );

        string filePath = buildPath(mainFolder, "Mappings.csv");
        std.file.write(filePath, csvContent);
    }

    static void generateReadmeFile()
    {
        string readmeContent = format(`# Mapping Files for %s v%s

Generated by Dumper-7 (D Language Version)

## Files Description:

- **Mappings.usmap.txt**: Text representation of USMAP format mappings
- **Mappings.json**: JSON format mappings with detailed structure information  
- **Mappings.csv**: CSV format mappings for easy parsing

## Usage:

These mapping files can be used with various Unreal Engine tools:

- FModel: Use .usmap files for asset extraction and viewing
- UEViewer: Import mappings for structure definitions
- Custom tools: Parse JSON or CSV for programmatic access

## Format Information:

**JSON Format:**
- Contains metadata about the game and generation process
- Objects section with class definitions and property mappings
- Each property includes offset, type, and size information

**CSV Format:**
- Simple comma-separated format
- Columns: ClassName, PropertyName, PropertyType, Offset, Size, IsPointer
- Easy to import into spreadsheet applications or databases

**USMAP Format:**
- Binary format used by FModel and other Unreal Engine tools
- Contains compressed mapping data for efficient loading
- Compatible with standard USMAP specifications

Generated on: %s
`,
            Settings.Generator.gameName.length > 0 ? Settings.Generator.gameName : "UnknownGame",
            Settings.Generator.gameVersion.length > 0 ? Settings.Generator.gameVersion : "Unknown",
            Clock.currTime().toISOExtString()
        );

        string filePath = buildPath(mainFolder, "README.md");
        std.file.write(filePath, readmeContent);
    }

    public:
    static void generate()
    {
        writeln("Generating mapping files...");

        // Create output directory
        if (!exists(mainFolder))
            mkdirRecurse(mainFolder);

        // Generate different mapping formats
        generateUsmapFile();
        generateJSONMapping();
        generateCSVMapping();
        generateReadmeFile();

        writeln("Mapping generation completed!");
    }

    static void initPredefinedMembers()
    {
        // Initialize predefined members for mapping generation
        predefinedMembers["UObject"] = "core";
        predefinedMembers["UStruct"] = "core";
        predefinedMembers["UClass"] = "core";
        predefinedMembers["UFunction"] = "core";
        predefinedMembers["UProperty"] = "core";
        predefinedMembers["FName"] = "core";
        predefinedMembers["FString"] = "core";
    }

    static void initPredefinedFunctions()
    {
        // Initialize predefined functions for mapping generation
    }
}

// Need to import Clock for timestamps
import std.datetime : Clock;